import pandas as pd
import numpy as np
from datetime import datetime
import matplotlib.pyplot as plt
import plotly.express as px

file = ["produkt_ff_stunde_19850101_20221231_03379.txt",    # City mean
        "produkt_ff_stunde_19920519_20221231_01262.txt",    # Airp mean
        "produkt_zehn_min_fx_19970712_19991231_03379.txt",  # City gust
        "produkt_zehn_min_fx_20000101_20091231_03379.txt",
        "produkt_zehn_min_fx_20100101_20191231_03379.txt",
        "produkt_zehn_min_fx_20200101_20221231_03379.txt",
        "produkt_zehn_min_fx_19920520_19991231_01262.txt",  # Airp gust
        "produkt_zehn_min_fx_20000101_20091231_01262.txt",
        "produkt_zehn_min_fx_20100101_20191231_01262.txt",
        "produkt_zehn_min_fx_20200101_20221231_01262.txt"]

df_airp = pd.read_csv(file[1], sep=";")     # Airport mean wind information
df_city = pd.read_csv(file[0], sep=";")     # City mean wind information
df_gairp = pd.concat([pd.read_csv(file[6], sep=";"), pd.read_csv(file[7], sep=";"), pd.read_csv(file[8], sep=";"), pd.read_csv(file[9], sep=";")])    # Airport gust information
df_gcity = pd.concat([pd.read_csv(file[2], sep=";"), pd.read_csv(file[3], sep=";"), pd.read_csv(file[4], sep=";"), pd.read_csv(file[5], sep=";")])    # City gust information

dataframes = [df_airp, df_city, df_gairp, df_gcity]


##################################
# FILTERING AND PROCESSING OF DATA
##################################

for i, df in enumerate(dataframes):
    if i < 2:
        df['MESS_DATUM'] = pd.to_datetime(df['MESS_DATUM'], format='%Y%m%d%H')      # Converting to datetime format
    else:
        df['MESS_DATUM'] = pd.to_datetime(df['MESS_DATUM'], format='%Y%m%d%H%M')
    df = df.rename(columns={'MESS_DATUM':'Date',                                    # Renaming columns to more descriptive names
                            'STATIONS_ID':'Station',
                            'QN':'QualityLevel',
                            'QN_3':'QualityLevel',
                            '   F':'WindSpeed',
                            '   D':'WindDirection',
                            'FX_10':'MaxSpeed',
                            'DX_10':'MaxDir',
                            'FMX_10':'MaxMean',
                            'FNX_10':'MinSpeed'})
    df = df.set_index(['Date'])
    del df['eor']                                                                   # Deleting end Of Report column
    if i < 2:
        df = df[df.WindSpeed >= 0]                                                  # Keeping only positive values
        df = df[df.WindDirection >= 0]
    else:
        df = df[df.MaxSpeed >= 0]
        df = df.replace({-999.0: np.nan})                                           # Not available data are stored as "-999.0"
    dataframes[i] = df
[df_airp, df_city, df_gairp, df_gcity] = dataframes[:]                              # Assigning the obtained values back to the original variables

date_lim = datetime(1997, 7, 1)                                                     # Using only data generated by automated stations (from 1997 for the city station)
df_city = df_city[df_city.index > date_lim]

### 1.- MEAN

# Wind speed ranges
ranges = [1, 3, 6, 10]      # Slices into which the wind intensity is to be divided into
dataframes_a = []           # Stores the different subsets of data based on the wind intensity. dataframes_a[0] will only have the entries where the wind was at lowest intensity
dataframes_c = []
dataframes_a.append(df_airp[df_airp.WindSpeed < ranges[0]])
dataframes_c.append(df_city[df_city.WindSpeed < ranges[0]])
for i in range(1, len(ranges)):
    dataframes_a.append(df_airp[(df_airp.WindSpeed > ranges[i-1]) & (df_airp.WindSpeed < ranges[i])])
    dataframes_c.append(df_city[(df_city.WindSpeed > ranges[i-1]) & (df_city.WindSpeed < ranges[i])])
dataframes_a.append(df_airp[df_airp.WindSpeed > ranges[-1]])
dataframes_c.append(df_city[df_city.WindSpeed > ranges[-1]])

months = ["Jan", "Feb", "Mar", "Apr", "May", "June", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
directions = ['N', 'NE', 'E', 'SE', 'S', 'SW', 'W', 'NW']
directions2 = np.arange(0, 360, 10).tolist()     # 10-degree steps

# Wind speed ranges per month
ranges_a = np.zeros((12,5))             # Stores how often in month (i+1) the wind has been blowing with intensity j
ranges_c = np.zeros((12,5))
for i in range(12):
    for j, df in enumerate(dataframes_a):
        ranges_a[i,j] = len(df.loc[df.index.month == i+1].WindSpeed)
    for j, df in enumerate(dataframes_c):
        ranges_c[i,j] = len(df.loc[df.index.month == i+1].WindSpeed)
df_ranges_a = pd.DataFrame(ranges_a, index=months, columns=["<1","1-3","3-6","6-10",">10"])
df_ranges_c = pd.DataFrame(ranges_c, index=months, columns=["<1","1-3","3-6","6-10",">10"])

# Wind ranges per direction (8 Himmelrichtungen)
dir_a = np.zeros((8,5))                 # Stores how often the wind of intensity j has been blowing in direction 45*i degrees
dir_c = np.zeros((8,5))
for j, df in enumerate(dataframes_a):
    dir_a[0,j] = len(df[(df.WindDirection > 360-22.5) | (df.WindDirection < 22.5)])
for j, df in enumerate(dataframes_c):
    dir_c[0,j] = len(df[(df.WindDirection > 360-22.5) | (df.WindDirection < 22.5)])
for i in range(1,8):
    for j, df in enumerate(dataframes_a):
        dir_a[i,j] = len(df[(df.WindDirection > (45*i)-22.5) & (df.WindDirection < (45*i)+22.5)])       
    for j, df in enumerate(dataframes_c):
        dir_c[i,j] = len(df[(df.WindDirection > (45*i)-22.5) & (df.WindDirection < (45*i)+22.5)]) 

df_dir_a = pd.DataFrame(dir_a, index=directions, columns=["<1","1-3","3-6","6-10",">10"])   # Creating a df from the arrays obtained
df_dir_c = pd.DataFrame(dir_c, index=directions, columns=["<1","1-3","3-6","6-10",">10"])
df_dir_a = pd.melt(df_dir_a.reset_index(), id_vars=['index'], var_name='SpeedRange [m/s]', value_name='Frequency')   # Changes df type from "wide" to "long"
df_dir_c = pd.melt(df_dir_c.reset_index(), id_vars=['index'], var_name='SpeedRange [m/s]', value_name='Frequency')
df_dir_a.rename(columns={'index': 'Direction'}, inplace=True)
df_dir_c.rename(columns={'index': 'Direction'}, inplace=True)

# Wind ranges per direction (10-degree precision)
dir2_a = np.zeros((36,5))
dir2_c = np.zeros((36,5))
for j,df in enumerate(dataframes_a):
    dir2_a[0,j] = len(df[(df.WindDirection > 360-5) | (df.WindDirection < 5)])
for j,df in enumerate(dataframes_c):
    dir2_c[0,j] = len(df[(df.WindDirection > 360-5) | (df.WindDirection < 5)])
for i in range(1,36):
    for j, df in enumerate(dataframes_a):
        dir2_a[i,j] = len(df[(df.WindDirection > (10*i)-5) & (df.WindDirection < (10*i)+5)])
    for j, df in enumerate(dataframes_c):
        dir2_c[i,j] = len(df[(df.WindDirection > (10*i)-5) & (df.WindDirection < (10*i)+5)])   

df_dir2_a = pd.DataFrame(dir2_a, index=directions2, columns=["<1","1-3","3-6","6-10",">10"])
df_dir2_c = pd.DataFrame(dir2_c, index=directions2, columns=["<1","1-3","3-6","6-10",">10"])
df_dir2_a = pd.melt(df_dir2_a.reset_index(), id_vars=['index'], var_name='SpeedRange [m/s]', value_name='Frequency')    
df_dir2_c = pd.melt(df_dir2_c.reset_index(), id_vars=['index'], var_name='SpeedRange [m/s]', value_name='Frequency')
df_dir2_a.rename(columns={'index': 'Direction'}, inplace=True)
df_dir2_c.rename(columns={'index': 'Direction'}, inplace=True)

### 2.- GUST

# Comparison mean vs gust speed per month
df_comp_a = pd.DataFrame(index=months, columns=["Mean", "Gust"])        # Stores monthly average of the mean and gust winds
df_comp_c = pd.DataFrame(index=months, columns=["Mean", "Gust"])
df_comp_a['Mean'] = df_airp.groupby(df_airp.index.month).mean().WindSpeed.to_list()
df_comp_a['Gust'] = df_gairp.groupby(df_gairp.index.month).mean().MaxSpeed.to_list()
df_comp_c['Mean'] = df_city.groupby(df_city.index.month).mean().WindSpeed.to_list()
df_comp_c['Gust'] = df_gcity.groupby(df_gcity.index.month).mean().MaxSpeed.to_list()


##########
# PLOTTING
##########

# AVERAGE WINDS PER YEAR
plt.figure(figsize=(10.5,5))
plt.title('Average winds in Munich city and airport')

years = [np.arange(1997, 2023, 1),
         np.arange(1992, 2023, 1)]
yearly_winds1 = df_city.groupby(df_city.index.to_period('A')).mean()    # city
yearly_winds2 = df_airp.groupby(df_airp.index.to_period('A')).mean()    # airport

plt.subplot(121)
plt.bar(years[0], yearly_winds1['WindSpeed'])
plt.xlabel('Year')
plt.ylabel('[m/s]')
plt.title('Munich city')
plt.ylim([0,4])

plt.subplot(122)
plt.bar(years[1], yearly_winds2['WindSpeed'])
plt.xlabel('Year')
plt.ylabel('[m/s]')
plt.title('Munich airport')
plt.ylim([0,4])

plt.show()

# MONTHLY WINDS (airport)
fig1 = px.bar(df_ranges_a, x=df_ranges_a.index, y=["<1","1-3","3-6","6-10",">10"], title='Monthly winds in Munich airport', labels={'index':'Month','value':'Frequency'}, color_discrete_sequence= px.colors.sequential.Plasma_r)
fig1.write_html("Relevant graphs/01_MonthWinds_airp.html")

# MONTHLY WINDS (city)
fig2 = px.bar(df_ranges_c, x=df_ranges_c.index, y=["<1","1-3","3-6","6-10",">10"], title='Monthly winds in Munich city', labels={'index':'Month','value':'Frequency'}, color_discrete_sequence= px.colors.sequential.Plasma_r)
fig2.write_html("Relevant graphs/02_MonthWinds_city.html")

# WINDROSE (airport)
fig3 = px.bar_polar(df_dir_a, r="Frequency", theta="Direction", color="SpeedRange [m/s]", title='Wind direction and intensity in Munich airport', template="plotly_dark", color_discrete_sequence= px.colors.sequential.Plasma_r)
fig3.write_html("Relevant graphs/03_WindRose_airp.html")

# WINDROSE (city)
fig5 = px.bar_polar(df_dir_c, r="Frequency", theta="Direction", color="SpeedRange [m/s]", title='Wind direction and intensity in Munich city', template="plotly_dark", color_discrete_sequence= px.colors.sequential.Plasma_r)
fig5.write_html("Relevant graphs/04_WindRose_city.html")

# PRECISE WINDROSE (airport)
fig4 = px.bar_polar(df_dir2_a, r="Frequency", theta="Direction", color="SpeedRange [m/s]", title='Wind direction and intensity in Munich airport', template="plotly_dark", color_discrete_sequence= px.colors.sequential.Plasma_r)
fig4.write_html("Relevant graphs/05_WindRose_precise_airp.html")

# PRECISE WINDROSE (city)
fig6 = px.bar_polar(df_dir2_c, r="Frequency", theta="Direction", color="SpeedRange [m/s]", title='Wind direction and intensity in Munich city', template="plotly_dark", color_discrete_sequence= px.colors.sequential.Plasma_r)
fig6.write_html("Relevant graphs/06_WindRose_precise_city.html")

# GUST vs MEAN (airport)
fig8 = px.line(df_comp_a, x=df_comp_a.index, y=["Gust", "Mean"], title='Mean vs Gust intensity in Munich airport')
fig8.update_yaxes(range=[0,6])
fig8.write_html("Relevant graphs/07_GustvsMean_a.html")

# GUST vs MEAN (city)
fig7 = px.line(df_comp_c, x=df_comp_c.index, y=["Gust", "Mean"], title='Mean vs Gust intensity in Munich city')
fig7.update_yaxes(range=[0,6])
fig7.write_html("Relevant graphs/08_GustvsMean_c.html")

# WIND SPEED DISTRIBUTION (airport)
fig10 = px.histogram(df_airp, x='WindSpeed', nbins=100, title='Wind intenstiy distribution in Munich airport')
fig10.update_layout(bargap = 0.05)
fig10.update_xaxes(range=[0,20])
fig10.write_html('Relevant graphs/09_Histogram_a.html')

# WIND SPEED DISTRIBUTION (city)
fig9 = px.histogram(df_city, x='WindSpeed', nbins=100, title='Wind intenstiy distribution in Munich city')
fig9.update_layout(bargap = 0.05)
fig9.update_xaxes(range=[0,20])
fig9.write_html('Relevant graphs/10_Histogram_c.html')

# WIND GUST DISTRIBUTION (airport)
fig12 = px.histogram(df_gairp, x='MaxSpeed', nbins=200, title='Gust intenstiy distribution in Munich airport')
fig12.update_layout(bargap = 0.05)
fig12.update_xaxes(range=[0,20])
fig12.write_html('Relevant graphs/11_Histogram_gust_a.html')

# WIND GUST DISTRIBUTION (city)
fig11 = px.histogram(df_gcity, x='MaxSpeed', nbins=200, title='Gust intensity distribution in Munich city')
fig11.update_layout(bargap = 0.05)
fig11.update_xaxes(range=[0,20])
fig11.write_html('Relevant graphs/12_Histogram_gust_c.html')
